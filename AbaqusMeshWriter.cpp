#include "Global.h"
#include "Node.h"
#include "Element.h"


#include <boost/algorithm/string.hpp>


// =====================================================================
//     writeAbaqusMesh
// =====================================================================

/**
 * Write the modified bulk elements and cohesive elements to an Abaqus job file
 * (an *.inp file).
 * At the command line, run Abaqus: abaqus job=filename
 */

void                     writeAbaqusMesh 

    ( Global&     globdat,
      const char* fileName )
{
  ofstream file ( fileName, std::ios::out );

  file << "*HEADING\n";
  file << "Abaqus job automatically generated by the cohesive element generator\n"
       << "Reference: VP Nguyen, An open source program to generate zero-thickness cohesive interface elements,\n"
       << "Advances in Engineering Software, 2014.\n"
       << "Only nodes, bulk and cohesive elements are written correctly.\n"
       << "Users have to make proper changes to some parameters: element types, boundary conditions etc.\n";
  
  cout << "Writing nodes...\n";

  file << "*NODE\n";

  const int nodeCount    = globdat.newNodeSet.size   ();
  const int elemCount    = globdat.elemSet.size      ();
  const int bndElemCount = globdat.bndElementSet.size();

  NodePointer np;

  for ( int in = 0; in < nodeCount; in ++ )
  {
    np = globdat.newNodeSet[in];
 
    if ( !globdat.is3D )
    {
      file << np->getIndex() 
           << ", " << np->getX() << ", " << np->getY() << "\n";
    }
    else
    {
      file << np->getIndex() << ", " 
	   << np->getX() << ", " 
	   << np->getY() << ", "
	   << np->getZ() << "\n";
    }
  }

  cout << "Writing nodes...done!\n\n";

  cout << "Writing bulk elements...\n";

  file << "*ELEMENT, " << "TYPE=CPS4," << " ELSET=DD" << "\n";

  ElemPointer ep;
  IntVector   connect, newConnect;

  for ( int ie = 0; ie < elemCount; ie ++ )
  {
    ep = globdat.elemSet[ie];

    file << ep->getIndex () << ", ";

    ep->getJemConnectivity ( connect ); 

    copy ( connect.begin(), connect.end()-1, ostream_iterator<int> (file, ", " ) );
    file << connect[connect.size()-1] << "\n";
  }

  cout << "Writing bulk elements...done!\n\n";

  cout << "Writing user elements (interface elements)...\n";

  file << "*USER ELEMENT, " << "TYPE=U1," << " NODE=4, " 
       << "COORDINATES=2, " << "PROPERTIES=9, " << "VARIABLES=4" << "\n"
       << "1,2\n";
  
  file << "*ELEMENT, " << "TYPE=U1," << " ELSET=COH\n"; 


  const int   ieCount = globdat.interfaceSet.size ();
  const int   inCount = globdat.nodeSet.     size ();

  IntVector   connec;
  IntVector   dupNodes;

  int         index;
  int         inter;

  for ( int ie = 0; ie < ieCount; ie++ )
  {
    ep = globdat.interfaceSet[ie];

    file << ep->getIndex() << ", "; 

    ep->getConnectivity ( connec );

    copy ( connec.begin(), 
	   connec.end()-1, 
	   ostream_iterator<int> ( file, ", " ) 
	 );

    file << connec[connec.size()-1] << "\n";
  }

  cout << "Writing user elements...done!\n\n";

  cout << "Writing bulk element groups...\n";


  const int domCount = globdat.dom2Elems.size ();

  auto it  = globdat.dom2Elems.begin ();
  auto eit = globdat.dom2Elems.end   ();

  for ( ; it != eit; ++it )
  {
    int       domName = it->first; 
    IntVector elems   = it->second; 

    file << "*ELSET, " << "ELSET=" << domName << "\n";
    
    for ( int ie = 0; ie < elems.size()-1; ie++ )
    {
      file << elems[ie] << ",";
    }

    file << elems[elems.size()-1] << "\n";
  }

  cout << "Writing bulk element groups...done!\n\n";

  cout << "Writing node groups...\n";

  const int nodeGrpCount = globdat.bndNodesMap.size ();

  //if ( nodeGrpCount != 1 )
  //{
    //Int2IntSetMap::iterator sit  = globdat.bndNodesMap.begin ();
    //Int2IntSetMap::iterator seit = globdat.bndNodesMap.end   ();

    auto sit  = globdat.bndNodesMap.begin ();
    auto seit = globdat.bndNodesMap.end   ();

    for ( ; sit != seit; ++sit )
    {
      int       domName = sit->first; 
      IntSet    elems   = sit->second; 

      IntVector   nodes;
      copy ( elems.begin(), elems.end(), back_inserter(nodes) );
   
      file << "*NSET, " << "NSET=" << domName << "\n";

      for ( int ie = 0; ie < nodes.size()-1; ie++ )
      {
	file << nodes[ie] << ",";
      }

      file << nodes[nodes.size()-1] << "\n";
    }
 // }

  const int isoNodeCount = globdat.isolatedNodes.size ();

  if ( isoNodeCount != 0 )
  {
    for ( int in = 0; in < isoNodeCount; ++in )
    {
      file << "*NSET, " << "NSET=" << "dd" << "\n";

      file << globdat.isolatedNodes[in] << "\n";
    }
  }

  cout << "Writing node groups...done!\n\n";
  
//  file << "*UEL PROPERTY, " << "ELSET=COH" << "\n";
//  file << "100, 200, 300" << "\n";
//  file << "*BOUNDARY " << "\n";
//  file << "*MATERIAL " << "\n";
}

